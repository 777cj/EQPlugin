/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

#include <cstring>

namespace BinaryData
{

//================== chart.png ==================
static const unsigned char temp_binary_data_0[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,48,0,0,0,48,8,6,0,0,0,87,2,249,135,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,32,99,72,82,77,0,0,122,38,0,0,128,132,0,0,250,0,0,0,128,232,0,0,117,48,0,0,234,96,0,0,58,152,0,0,23,112,156,186,
81,60,0,0,0,6,98,75,71,68,0,0,0,0,0,0,249,67,187,127,0,0,0,9,112,72,89,115,0,0,0,96,0,0,0,96,0,240,107,66,207,0,0,2,127,73,68,65,84,104,222,237,153,203,107,83,65,24,197,231,171,81,116,89,10,62,168,47,16,212,133,143,141,110,107,165,42,148,170,40,136,160,
224,99,41,34,238,180,255,66,23,66,253,7,196,173,66,87,46,44,196,149,238,84,140,8,66,209,141,11,31,113,39,82,19,81,219,254,92,228,6,175,95,238,77,102,238,76,114,175,120,15,100,49,147,115,190,57,231,206,100,50,147,24,83,162,196,255,13,209,29,0,127,17,68,
196,190,220,224,49,148,183,129,50,64,222,6,10,27,0,216,14,220,6,22,128,239,209,107,1,152,5,182,245,45,17,10,25,107,156,5,154,164,163,9,156,41,100,0,224,18,176,76,111,44,1,23,10,21,0,216,13,52,44,204,183,209,0,118,21,41,192,19,37,255,1,220,4,214,3,27,
128,105,224,167,226,60,46,68,0,96,34,225,9,95,76,224,93,78,224,141,23,33,64,85,73,31,118,225,206,219,114,7,18,0,24,141,62,148,113,140,117,225,31,82,220,101,96,115,158,1,166,149,236,13,32,93,248,2,188,85,154,27,89,252,134,250,34,59,169,218,119,68,36,53,
124,244,222,93,213,125,34,136,19,215,25,0,134,213,242,89,1,70,45,116,91,34,110,27,191,128,97,87,191,33,102,224,152,49,102,85,172,253,74,68,62,246,18,137,200,123,99,204,235,88,87,197,24,115,52,143,0,147,170,61,239,160,213,187,207,164,131,54,25,46,75,40,
250,48,214,109,119,159,4,253,152,210,214,1,191,135,234,24,224,128,162,127,1,42,14,99,85,34,77,28,7,93,252,250,46,161,41,213,174,138,200,146,173,56,226,62,234,81,115,160,1,92,214,127,154,230,184,151,35,219,37,68,235,128,22,63,54,175,0,155,50,140,183,81,
109,167,86,219,112,27,62,51,48,165,244,47,68,164,238,90,68,68,62,27,99,106,241,46,227,176,27,249,4,56,175,218,62,7,50,173,61,151,185,146,205,18,2,182,210,121,235,218,235,49,230,254,132,195,93,182,123,179,101,128,91,138,246,60,243,19,251,83,179,166,106,
206,246,37,0,173,155,213,162,162,93,9,16,224,170,170,217,200,178,41,216,4,152,83,148,79,192,186,0,1,214,2,31,84,237,7,65,3,0,51,116,226,154,175,249,88,253,235,9,245,103,188,2,0,35,192,17,58,175,140,0,79,129,213,1,3,172,1,158,37,140,83,165,117,231,30,
201,18,32,13,139,192,206,80,230,99,227,239,0,190,166,13,26,42,192,55,224,112,104,243,49,15,19,164,252,190,20,34,64,13,216,211,47,243,49,31,251,128,151,33,2,52,129,119,192,61,224,20,190,231,117,183,16,67,192,105,224,126,228,161,169,57,229,63,52,121,163,
231,12,20,13,122,69,252,243,51,80,6,40,81,162,68,190,248,13,130,149,156,70,224,95,170,233,0,0,0,37,116,69,88,116,100,97,116,101,58,99,114,101,97,116,101,0,50,48,50,50,45,49,50,45,51,49,84,49,51,58,52,50,58,50,51,43,48,48,58,48,48,41,201,107,55,0,0,0,
37,116,69,88,116,100,97,116,101,58,109,111,100,105,102,121,0,50,48,50,50,45,49,50,45,51,49,84,49,51,58,52,50,58,50,51,43,48,48,58,48,48,88,148,211,139,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* chart_png = (const char*) temp_binary_data_0;

//================== power.png ==================
static const unsigned char temp_binary_data_1[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,48,0,0,0,48,8,6,0,0,0,87,2,249,135,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,32,99,72,82,77,0,0,122,38,0,0,128,132,0,0,250,0,0,0,128,232,0,0,117,48,0,0,234,96,0,0,58,152,0,0,23,112,156,186,
81,60,0,0,0,6,98,75,71,68,0,0,0,0,0,0,249,67,187,127,0,0,0,9,112,72,89,115,0,0,0,96,0,0,0,96,0,240,107,66,207,0,0,2,139,73,68,65,84,104,222,237,153,77,107,83,65,20,134,207,212,104,43,70,91,17,33,42,106,107,17,180,160,136,255,64,93,105,183,42,130,208,
141,11,119,138,255,160,34,168,184,171,104,165,226,31,168,11,177,10,110,69,240,3,68,40,213,125,149,84,173,168,11,149,40,68,148,199,69,110,233,237,233,36,153,220,156,73,65,238,187,202,9,115,206,121,159,201,48,51,247,70,36,87,174,92,185,86,82,46,86,97,128,
37,141,156,139,210,171,43,22,64,167,148,3,172,180,50,3,0,5,43,19,237,212,202,4,0,108,23,145,167,192,85,3,243,163,34,242,18,24,176,154,144,102,13,135,128,79,44,106,180,206,184,37,170,103,62,53,100,30,216,27,219,124,191,50,191,160,115,173,2,0,23,60,117,
230,129,157,177,204,175,5,166,61,77,39,129,222,12,0,155,128,251,158,122,175,128,158,24,0,151,61,205,198,0,87,103,124,200,18,234,2,110,121,234,94,178,54,63,8,84,61,51,239,26,228,52,5,72,65,220,83,195,171,192,160,37,192,132,106,240,30,232,107,146,19,4,
144,140,237,5,202,42,101,220,202,124,17,248,165,138,159,14,200,11,6,72,198,143,168,148,159,192,58,11,128,147,170,240,59,96,85,4,128,130,231,87,56,222,44,47,228,32,59,172,226,73,231,220,223,182,103,70,201,57,247,71,68,238,170,175,143,88,0,28,84,241,99,
107,243,13,106,31,176,0,216,161,226,55,17,1,94,171,184,223,2,160,79,197,95,35,2,124,81,241,70,11,0,189,215,175,142,8,176,166,213,132,16,128,31,42,222,26,17,96,139,138,191,91,0,204,170,120,87,136,19,167,20,8,160,79,223,217,102,9,33,0,51,42,30,14,52,147,
69,186,246,76,166,42,105,1,167,212,225,82,14,57,200,50,244,41,0,115,170,215,9,139,194,69,160,162,10,159,137,0,112,86,245,168,0,69,171,226,119,60,151,185,245,134,230,55,0,31,85,143,219,150,179,179,27,248,173,26,76,1,109,191,213,72,174,211,15,60,215,233,
160,205,162,149,70,215,88,174,177,118,32,18,243,215,61,117,175,152,154,79,154,245,0,47,60,205,166,178,44,167,100,217,60,244,212,123,6,116,155,3,36,77,75,158,43,47,192,103,224,60,1,239,119,146,89,31,241,172,121,128,15,192,182,40,230,83,6,246,123,182,187,
5,205,1,55,128,163,192,158,100,7,43,38,159,143,1,55,27,228,150,129,125,81,205,167,32,54,3,79,176,211,115,160,212,17,243,41,136,110,224,34,203,207,136,86,84,165,246,182,35,206,154,15,4,41,1,227,45,130,84,168,189,40,104,123,171,52,251,211,129,218,169,57,
44,34,135,164,246,36,53,32,139,207,18,223,68,228,173,136,76,75,237,169,235,145,115,174,210,209,153,206,149,43,87,174,92,255,165,254,1,82,212,212,241,108,197,50,95,0,0,0,37,116,69,88,116,100,97,116,101,58,99,114,101,97,116,101,0,50,48,50,50,45,49,50,45,
51,49,84,49,52,58,49,53,58,51,55,43,48,48,58,48,48,255,212,254,217,0,0,0,37,116,69,88,116,100,97,116,101,58,109,111,100,105,102,121,0,50,48,50,50,45,49,50,45,51,49,84,49,52,58,49,53,58,51,55,43,48,48,58,48,48,142,137,70,101,0,0,0,0,73,69,78,68,174,66,
96,130,0,0 };

const char* power_png = (const char*) temp_binary_data_1;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes);
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x5e459a48:  numBytes = 893; return chart_png;
        case 0x32655fef:  numBytes = 905; return power_png;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "chart_png",
    "power_png"
};

const char* originalFilenames[] =
{
    "chart.png",
    "power.png"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8);
const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
        if (strcmp (namedResourceList[i], resourceNameUTF8) == 0)
            return originalFilenames[i];

    return nullptr;
}

}
